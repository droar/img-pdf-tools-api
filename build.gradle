plugins {
	id 'java'
	id "org.springframework.boot" version "2.5.0"
	id "io.spring.dependency-management" version "1.0.11.RELEASE"
	id 'maven-publish'
	id "io.freefair.lombok" version "5.3.0"
	id "org.sonarqube" version "3.0"
}

group = 'com.droar'
version = '1.0.0'
description = 'ocr-redaction-api'
sourceCompatibility = '11'
targetCompatibility = '11'

ext {
    group = "com.droar"
    springprofile = System.getenv("SPRING_PROFILES_ACTIVE")
    apacheCommonsColVersion = "4.0"
    apacheCommonsLangVersion = "3.11"
    httpClientVersion = "4.5.13"
    jacksonVersion = "2.11.3"
    janinoVersion = "3.1.3"
    springDocVersion = "1.5.8"
    tikaVersion = "1.24.1"
    itextPdfVersion = "7.1.15"
    itextCleanVersion = "2.0.6.1"
    tess4jVersion = "4.5.4"
    lept4jVersion = "1.13.2"
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
	
	// workaround to publish an spring boot application
	[apiElements, runtimeElements].each {
		it.outgoing.artifacts.removeIf {
			it.buildDependencies.getDependencies(null).contains(jar)
		}
		it.outgoing.artifact(bootJar)
	}
}

dependencies {
	// Spring libs
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-hateoas"
	implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"

	// Jackson JSON parsing libs
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    
    // HttpClient libs
    implementation "org.apache.httpcomponents:httpclient:${httpClientVersion}"
    
	// Itext (APGL)
	implementation "com.itextpdf:itext7-core:${itextPdfVersion}"
	implementation "com.itextpdf:styled-xml-parser:${itextPdfVersion}"
	implementation "com.itextpdf:pdf-redaction:${itextCleanVersion}"

	// Tesseract 4 j (OS)
	implementation "net.sourceforge.tess4j:tess4j:${tess4jVersion}"
	implementation "net.sourceforge.lept4j:lept4j:${lept4jVersion}"
	
	// PDF BOX
	implementation "org.apache.pdfbox:pdfbox:2.0.23"
	
	// PDFBOX Rendering PDF to IMG
	implementation 'com.github.jai-imageio:jai-imageio-core:1.4.0'
    implementation 'com.github.jai-imageio:jai-imageio-jpeg2000:1.3.0'
    implementation 'org.apache.pdfbox:jbig2-imageio:3.0.3'
	
	// Utils
	implementation "org.apache.commons:commons-collections4:${apacheCommonsColVersion}"
	implementation "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"
	implementation "org.codehaus.janino:janino:${janinoVersion}"
	implementation "org.apache.tika:tika-core:${tikaVersion}"
	implementation "org.boofcv:boofcv-core:0.37"
	implementation "org.boofcv:boofcv-swing:0.37"
	
	
	// Loombok
	compileOnly "org.projectlombok:lombok"
	annotationProcessor "org.projectlombok:lombok"
	
	// Testing
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
}

test {
	useJUnitPlatform()
}

repositories {
	mavenCentral()
	maven {
    	url "https://maven.pkg.github.com/droar/personal-repo/"
    	credentials {
			// gitlab CI/CD
			if (project.hasProperty('gitHubPrivateToken')) {
				username = "droar"
				password = project.property('gitHubPrivateToken')
			}
		}
	}
}

/**
publishing {
	publications {
		library(MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			url "/packages/maven"
			name "GitLab"
			credentials(HttpHeaderCredentials) {
				// gitlab CI/CD
				if (project.hasProperty('jobToken')) {
					name = "Job-Token"
					value = project.property('jobToken')
				}
				// local
				else {
					name = 'Private-Token'
					value = gitLabPrivateToken
				}
			}
			authentication {
				header(HttpHeaderAuthentication)
			}
		}
	}
}
**/
